


###################################################################################################################################
#
#
#
# 
#	tree|stake
#		  
#    	Copyright (C) 2019 Douglas Chesters
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#	contact address dc0357548934@live.co.uk
#
#
#
#
#
#
##########################################################################################################################################
#
# 
# 
# If you find this useful, please cite either of these:
# 
# Chesters D. 2017. 
#  Construction of a Species-Level Tree-of-Life for the Insects and Utility in Taxonomic Profiling. 
#  Systematic Biology 66 (3): 426â€?39. 
# 
# Chesters, D. 2019. 
#  tree|stake. Computer software available at https://github.com/dchesters/treestake.
# 
# 
# 
# #######################################################################################################
# 
# 
# tree|stake represents further development of the method for using backbone topologies to constrain
#  phylogenies of sequence matrices with limited information content, such as DNA barcodes.
#  Method was first published as part of the SOPHI pipeline (Chesters 2017), although was a restricted implementation.
#  Current version has clearer delineation of the processes, and there are more options for how it can be applied.
#  
# 
#
# Consists of set of commands (see later). 
# Plus 4 main Perl scripts: 
#   taxon_table.pl
#   relational_constraints.pl
#   taxon_constraints.pl
#   integrate_constraints.pl
# And 3 extra Perl scripts which might be useful:
#   prune_tree.pl
#   concatenate_v2.pl
#   format_conversion.pl
#



cd /home/douglas/scripted_analyses/sDiv/analysis1/



# Specifications for the DNA barcode (or similar) alignment:
#  FastA format, IDs like this:
#  >[Genus]_[species]
#  For example
#  >Aenictus_aratus
#  and, no duplicate IDs (ie filtered at the species level).

# Specifications for Backbone phylogeny.
#  Newick format,
#  Terminal IDs like this:
#  [Genus]_[species]
#  Preferably unrooted, since it will be used to make a Raxml constraint tree, and Raxml requires these unrooted.
#  Script will try and unroot a rooted tree, but may not work dependeing on idiosyncrasies of the format.
#  Node values and branchlengths will be ignored if present, although atypical formats may cause issues.

# First step is creating a taxonomic framework for the taxon of interest.
#  There are two options:
#  use the NCBI taxonomic database only
#  use both the NCBI and ITIS taxonomic databases.
#  nb, cannot use only ITIS database due to its limited rank information.
#  Also note, although BOLD presumably more comprehenisve than NCBI, 
#  BOLD taxonomy data are not easily downloaded (only specimen and sequence data available).
#  Using both NCBI and ITIS databases takes advantage of both greater rank inormation in NCBI, and greater species level coverage in ITIS.
#  If you have species which have not been made publically availalbe, then try ITIS, they are more likely to be there.
#  or if you are doing a data-mining type study, using species which are publically available,
#  NCBI is proably sufficient and more efficient.

# NCBI taxonomy database is required 
#  You need to download the NCBI taxonomy database from ftp://ftp.ncbi.nih.gov/pub/taxonomy/,
#  download the file taxdump.tar.gz, and unzip in the working directory. 
#  The script will read 2 of the resulting files: names.dmp and nodes.dmp.
#  command for running ONLY on NCBI database follows, main thing user needs to specify is the NCBI taxon number which encompasses the current job.
#  for example taxon number for Lepidoptera is 7088, and for Hymenoptera, 7399
#  in addition to specifying the path and names for the NCBI database, we will name the output file Taxon_Table.NCBI

NCBI_names=~/scripted_analyses/sDiv/data/names.dmp
NCBI_nodes=~/scripted_analyses/sDiv/data/nodes.dmp
rm Taxon_Table.NCBI
perl ~/usr_scripts/taxon_table.pl -node 7399 -NCBI $NCBI_names $NCBI_nodes -outfile Taxon_Table.NCBI
# Take a look at the output file with the following command 
cat Taxon_Table.NCBI
# As you can see, there are five columns, e.g.
# 7400	7399	Apocrita	Hymenoptera	suborder
# Columns are:
# [Child_node_ID]	[Parent_node_id]	[Child_taxon]	[Parent_taxon]	[Child_rank]
# and there is one row for each node in the taxonomic framework

# Alternative option is to use BOTH NCBI and ITIS. 
# Instructions for obtaining the ITIS database:
#  Go to https://www.itis.gov/,
#  Search scientific name Arthropoda, click on the correct name then download in DwC-A format. 
#  Uncompress the file.
#  Note, ITIS does not have subfamily, tribe, nor insect specific ranks (e.g. Coleoptera series).
#  Technically it does have some of these names, but the ranks are not specified, so they cannot be parsed 
#  (there are reasons why ranks are required). 

# Specify path and name of ITIS database, and taxon of interest (here Hymenoptera)
ITIS_database=/home/douglas/scripted_analyses/sDiv/data/taxa_3842024.txt
taxon_of_interest=Hymenoptera
# Specify NCBI database as before
NCBI_names=~/scripted_analyses/sDiv/data/names.dmp
NCBI_nodes=~/scripted_analyses/sDiv/data/nodes.dmp
rm Taxon_Table
perl ~/usr_scripts/taxon_table.pl -node 7399 -ITIS $ITIS_database $taxon_of_interest -NCBI $NCBI_names $NCBI_nodes -outfile Taxon_Table
# The screen output will include count of the extra species found in the ITIS database
# that were not included in the NCBI database.

# The taxonomic heirarchy is output in human readalbe format, starting from the user specified node, and proceeding only to species level.
# The output is human readable.
# Here user should check Taxon_table, see if there are anything of particular interest , are these in order,
# One of the reasons for making this intermediate file is that,
# it can be manually modified if neccessary.
# If user has some key species missing from the database, they can be added here.
# If you do need to then:
# open Taxon_Table file, find a line of any species belonging to the genus you want to add a species to,
# for example if you want to add a species called 'newspecies' to the genus Micropterix, then this line would do:
# 41027	41026	Micropterix_calthella	Micropterix	species
# copy the line, put your new species in, then write some large random number as the new node ID
#  (important that the parent node ID is kept the same), e.g.:
# 1234567893	41026	Micropterix_newspecies	Micropterix	species


#########################################################


 # Next step is making relational constraints (bottom-up approach).

# Inputs are the taxon table made above,
# also the backbone phylogeny in Newick format,
# and the DNA barcode alignment in FastA format.
# There will probably be some work required on the part of the user.
# Firstly, there could be terminals in the backbone phylogeny that are not found in the taxonomic database.
# Lets check that with an initial run on the backbone phylogeny.

# Specify path and name of backbone:
backbone=~/scripted_analyses/sDiv/data/Formicids.nwk
# Specify DNA barcode alignment
sp_matrix=plot_taxa_from_BOLD.fas
# and taxon table made above
taxon_table=Taxon_Table

perl ~/usr_scripts/relational_constraints.pl -seqfile $sp_matrix -treefile $backbone -outfile_prefix $backbone.constraint1 -backbone_terminal_format 0 -taxon_table $taxon_table

# You will see a warning message that there are terminals of the tree for which taxonomic information is not found.
# This can be adressed either by adding these to the database as described earlier,
# or by pruning these taxa from the tree, which we will now do.
# Insert the list of terminals to be pruned into the command below,
# Specify path and filename of phylogeny, and output file
backbone=~/scripted_analyses/sDiv/data/Formicids.nwk
# nb. it is good practice to delete expected output filename before running any program:
rm Formicids.pruned
perl ~/usr_scripts/prune_tree.pl -treefile $backbone -output Formicids.pruned -start_prune_list Amyrmex_BR01 Epelysidris_brocha Myrmisaraka_brevis Ophthalmopone_berthoudi Buniapone_amblyops -end_prune_list
# The screen ouput will give a count of the terminals sucessfully pruned.
# Look at results file:
cat Formicids.pruned

# Now have a backbone phylogeny a bit more suitable for use, 
# try running the relational constraints script again, on the newly pruned phylogeny
rm relational_constraints.ft_format
backbone=Formicids.pruned
sp_matrix=plot_taxa_from_BOLD.fas
taxon_table=Taxon_Table
perl ~/usr_scripts/relational_constraints.pl -seqfile $sp_matrix -treefile $backbone -outfile_prefix $backbone.constraint1 -backbone_terminal_format 0 -taxon_table $taxon_table

# Should run ok now.
# Here is a quick rundown of what this script does:
# Reads the taxon file and stores the structure defined within.
# Reads the IDs contained in the DNA barcode file, 
# retreives the taxonomic information for each species contained,
# and stores all taxa found (which need to be constrained).
# Reads the Newick backbone phylogeny,
# Stores terminal IDs and their full taxonomies,
# and stores all taxon found on the tree.
# Taxonomic assignment is made for the backbone tree, pseudocode:
# for each backbone terminal
#	retreive its taxonomic lineage
#	for each parent taxon in lineage
#		if taxon observed in a different terminal of the phylogeny, store lower taxon name with terminal name, break. 
# Additionally, store names of backbone ids with no barcodes for pruning
# Then for each backbone terminal in which higher taxon inferred,
#	retreive list of barcode IDs belonging to taxon,
#	replace posiiton in newick string with comma-seperated list
# Finally relational constraints of the barcode data are output in 2 formats, 
# as character data which can be used with Fasttree, and as a Newick format constraint tree.
# This is done by recursing nodes of the backbone tree,
# ignoring nodes for which a bipartition of barcode taxa has not been defined (effectly collapsing the node),
# and printing the constraint definition (or incorporating it into the new Newick string) 
# where the bipartition does have defined constraint of barcode taxa.

# Thus, if your backbone phylogeny is comprehensive and there are terminal taxa which do not have DNA barcodes,
# these are automatically pruned in the resulting constraint tree.
# Constraint tree is output as constraint_phylogeny_pruned.nwk
# And character format constraints named relational_constraints.ft_format


###########################################################################################################


# The good thing about the above constraints is maintaining the integrety of the backbone topology.
# Disadvantage, as you can see from the screen output, there are barcode which cannot be fit into that
# strictly defined constraint system. 
# For this reason there is here the taxon/monophyly constraints (top-down approach), which is certainly the more involved method.
# A problem is that it is difficult to do this in Newick framework, and can only be defined as characters. 
# This is not a problem for Fasttree. For Raxml these can be incorporated as mock characters in the matrix,
# which may work at a small to medium scale, but is certainly inefficient and ineffective for very large matrices.

sp_matrix=plot_taxa_from_BOLD.fas
backbone=Formicids.pruned
taxon_table=Taxon_Table
rm taxon_constraints.fas ftcons relational_constraints_tabdelim taxon_constraints_only
perl ~/usr_scripts/taxon_constraints.pl -seqfile $sp_matrix -treefile $backbone -outfile_prefix $backbone.tax_con -print_taxon_constraints_only -backbone_terminal_format 0 -taxon_table $taxon_table

# Here is a rundown of what the script has just done.
# Store the taxonomic heirarchy and the taxa in the barcode alignment,
# for a given taxa, if all of them are decended from one node it means they are monophlyetic, and will be constrained.
# Recurse through nodes of the backbone tree, count how many terminals there are for each taxa,
# recursing for each node:
#	get list of terminals derived from the node, retrive taxa shared by all members 
# 	for each higher taxa observed for the node:
# 		test criteria i) they are present for all terminals, ii) their count == x (i.e. not observed elswhere); 
#		for taxa meeting both criteria, stored as putative monophyly.
# foreach barcode member
#	foreach monophyletic taxon
#		if member has no lineage information, code -, else,
# 		if member belongs to taxon, code 1,
# 		else code 0.


#####################################################################################################


# Two different approaches will be used for constructing phylogenies.
# Raxml will be used with a Newick constraint tree and mock-character-based taxon constraints,
# And Fasttree will be used with its flexible constraint table input.
# First Raxml

# The taxon constraints have been written as mock characters, concatenate these to the barcode alignment.
sp_matrix=plot_taxa_from_BOLD.fas
rm current_supermatrix2
perl ~/usr_scripts/concatenate_v2.pl -missing_data_char ? -remove_accession 2 -required_data ?? -matrices $sp_matrix taxon_constraints.fas

# Make a partition file, delineating DNA sequences from the binary characters (constraints)
# Save as partitfile

DNA, barcode1 = 1-624\3
DNA, barcode2 = 2-624\3
DNA, barcode3 = 3-624\3
BIN, constraint_binary = 625-657

# Convert matrix to Phylip format
rm current_supermatrix2.phy
perl ~/usr_scripts/format_conversion.pl current_supermatrix2 current_supermatrix2.phy fasta phylip

# Boostrapped tree search. 3 done for comparitive purposes. [ 1 and 2 swapped ]

	# a) both character based monophyly constraints and newick relational constraints.
constraint_tree=constraint_phylogeny_pruned.nwk
rm R*formicid_constrained2
raxmlHPC-8.2.4 -s current_supermatrix2.phy -n formicid_constrained2 -m GTRCAT -c 4 -q partitfile -g $constraint_tree -f a -x 12345 -p 12345 -# 250

	# b) this one is only monophyly constraints input as characters.
rm R*formicid_constrained
raxmlHPC-8.2.4 -s current_supermatrix2.phy -n formicid_constrained -m GTRCAT -c 4 -q partitfile -f a -x 12345 -p 12345 -# 250

	# c) Just for checking, an unconstrained tree search:
rm barcodes_only.phy
perl ~/usr_scripts/format_conversion.pl $sp_matrix barcodes_only.phy fasta phylip
rm R*formicid_unconstrained
raxmlHPC-8.2.4 -s barcodes_only.phy -n formicid_unconstrained -m GTRCAT -c 4 -f a -x 12345 -p 12345 -# 250

# Next how to apply constraints for a Fastree phylogeny. 
# Fastree can be used when an extremly large matrix is being used.
# At the superficial level, the resulting tree still looks pretty good because of the comprehensive constraints that can be applied.

sp_matrix=plot_taxa_from_BOLD.fas
rm constraints_concat
perl ~/usr_scripts/integrate_constraints.pl -constraint_files taxon_constraints_only relational_constraints.ft_format -fasta $sp_matrix -node 7399

# Run Fasttree
FastTree_buffer80000 -log fasttree_logfile -gtr -gamma -nt -constraints constraints_concat < $sp_matrix > FastreeOUT

# Fasttree often leaves polytomies, resolve these:
raxml-ng-0.6.0 --seed 123 --threads 2 --redo --msa $sp_matrix --model DNA --tree-constraint FastreeOUT --prefix FastreeOUTbif


# FIN.

######################################################################################################################################
